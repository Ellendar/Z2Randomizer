<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <Nullable>enable</Nullable>
        <LangVersion>default</LangVersion>
        <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <JsonSerializerIsReflectionEnabledByDefault>false</JsonSerializerIsReflectionEnabledByDefault>
        <AssemblyName>$(MSBuildProjectName)</AssemblyName>
        <RootNamespace>Z2Randomizer.CrossPlatformUI</RootNamespace>
        <Configurations>Debug;Release;Unsafe Debug</Configurations>
        <Platforms>AnyCPU</Platforms>
        <PublishTrimmed>true</PublishTrimmed>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Unsafe Debug' ">
      <DebugSymbols Condition=" '$(DebugSymbols)' == '' ">true</DebugSymbols>
      <Optimize Condition=" '$(Optimize)' == '' ">false</Optimize>
    </PropertyGroup>

    <ItemGroup>
        <AvaloniaResource Include="Assets\**" />
        <AvaloniaResource Include="Converters\**" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Avalonia" Version="$(AvaloniaVersion)" />
        <PackageReference Include="Avalonia.Fonts.Inter" Version="$(AvaloniaVersion)" />
        <PackageReference Include="Avalonia.ReactiveUI" Version="$(AvaloniaVersion)" />
        <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
        <PackageReference Condition="'$(Configuration)' == 'Debug'" Include="Avalonia.Diagnostics" Version="$(AvaloniaVersion)" />
        <PackageReference Include="DialogHost.Avalonia" Version="$(DialogHostAvaloniaVersion)" />
        <PackageReference Include="Material.Avalonia" Version="$(MaterialAvaloniaVersion)" />
        <PackageReference Include="Material.Icons.Avalonia" Version="$(MaterialIconsAvaloniaVersion)" />
        <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.8" />
        <PackageReference Include="ReactiveUI.Validation" Version="3.1.7" />
        <PackageReference Include="Aigamo.ResXGenerator" Version="4.2.0">
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
        <PackageReference Include="Xaml.Behaviors.Interactions" Version="11.3.2" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\RandomizerCore\RandomizerCore.csproj" />
    </ItemGroup>

    <Target Name="GenerateGitInfo" BeforeTargets="BeforeBuild">
        <MakeDir Directories="$(IntermediateOutputPath)" />
        <Exec Command="git rev-parse --short HEAD > $(IntermediateOutputPath)git-hash.txt" />
        <Exec Command="git rev-parse --abbrev-ref HEAD > $(IntermediateOutputPath)git-branch.txt" />
        <Exec Command="git diff --quiet || echo dirty > $(IntermediateOutputPath)git-dirty.txt" IgnoreExitCode="true" />

        <ReadLinesFromFile File="$(IntermediateOutputPath)git-hash.txt"><Output TaskParameter="Lines" PropertyName="GitHash" /></ReadLinesFromFile>
        <ReadLinesFromFile File="$(IntermediateOutputPath)git-branch.txt"><Output TaskParameter="Lines" PropertyName="GitBranch" /></ReadLinesFromFile>
        <ReadLinesFromFile File="$(IntermediateOutputPath)git-dirty.txt" Condition="Exists('$(IntermediateOutputPath)gitdirty.txt')"><Output TaskParameter="Lines" PropertyName="GitDirty" /></ReadLinesFromFile>
        <PropertyGroup><IsDirtyValue>false</IsDirtyValue></PropertyGroup>
        <PropertyGroup Condition="'$(GitDirty)' != ''"><IsDirtyValue>true</IsDirtyValue></PropertyGroup>
    </Target>

    <Target Name="WriteGitInfoFile" DependsOnTargets="GenerateGitInfo" BeforeTargets="BeforeBuild">

      <PropertyGroup>
        <GitInfoText>// (auto-generated from .csproj)
    namespace Z2Randomizer;
    public static class GitInfo {
        public const string Commit = &quot;$(GitHash)&quot;;
        public const string Branch = &quot;$(GitBranch)&quot;;
        public const bool IsDirty = $(IsDirtyValue);
    }
    </GitInfoText>
      </PropertyGroup>

      <WriteLinesToFile
          File="$(IntermediateOutputPath)GitInfo.cs"
          Overwrite="true"
          Lines="$([System.Text.RegularExpressions.Regex]::Split('$(GitInfoText)', '\n'))" />

      <ItemGroup>
          <Compile Include="$(IntermediateOutputPath)GitInfo.cs" />
      </ItemGroup>
    </Target>
</Project>
