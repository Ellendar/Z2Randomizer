@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Z2R Randomizer Online</PageTitle>

<div hidden="@HasRom">
    <h3>
        Select your Zelda 2 ROM to get started!
    </h3>

    <label>
        <InputFile OnChange="@LoadROMFile" />
    </label>
</div>

<div hidden="@(!HasRom)" class="container">
    <div class="row">
        <div class="col-auto">
            <label>
                Seed
                <input @bind="Seed" />
                <Button Color="ButtonColor.Secondary" @onclick="@NewSeed">New Seed</Button>
            </label>
        </div>
        <div class="col-auto">
            <label>
                Flags
                <input @bind:get="@(config.Serialize())" @bind:set="@(str => config = new RandomizerConfiguration(str))" />
            </label>
        </div>
        <div class="col-auto">
            <label>
                <Button Color="ButtonColor.Primary" @onclick="@OnShowModalClick">Generate ROM</Button>
            </label>
        </div>
    </div>
    <div class="row">
        <h4>Quick Start</h4>
        <p>To get started, choose a preset below or customize your experience</p>

        <div class="col-auto">
            <Button Color="ButtonColor.Secondary" @onclick="@(e => config = RandomizerConfiguration.FromLegacyFlags("jhEhMROm7DZ$MHRBTNBhBAh0PSmA"))">Beginner</Button>
        </div>
        <div class="col-auto">
            <Button Color="ButtonColor.Secondary" @onclick="@(e => config = RandomizerConfiguration.FromLegacyFlags("hAhhD0j9$78$Jp5$$gAhOAdEScuA"))">Standard</Button>
        </div>
        <div class="col-auto">
            <Button Color="ButtonColor.Secondary" @onclick="@(e => config = RandomizerConfiguration.FromLegacyFlags("iyAqh$j#g7@$ZqTBT!BhOA!0P@@A"))">Max Rando</Button>
        </div>
        <div class="col-auto">
            <Button Color="ButtonColor.Secondary" @onclick="@(e => config = new("hEAK0sALvrpUWVXu20Y$8v9ttf9tb7AAJy"))">Random%</Button>
        </div>
    </div>
    <div class="row">
        <h4>Full Customization</h4>
        <Tabs>
            <Tab Title="Start Config" IsActive="true">
                <Content>
                    <div class="row">
                        <div class="col-auto form-group">
                            <Switch @bind-Value="config.ShuffleStartingItems" Label="Shuffle Starting Items" />
                            <Switch @bind-Value="config.StartWithCandle" Label="Start With Candle" />
                            <Switch @bind-Value="config.StartWithGlove" Label="Start With Glove" />
                            <Switch @bind-Value="config.StartWithRaft" Label="Start With Raft" />
                            <Switch @bind-Value="config.StartWithBoots" Label="Start With Boots" />
                            <Switch @bind-Value="config.StartWithFlute" Label="Start With Flute" />
                            <Switch @bind-Value="config.StartWithCross" Label="Start With Cross" />
                            <Switch @bind-Value="config.StartWithHammer" Label="Start With Hammer" />
                            <Switch @bind-Value="config.StartWithMagicKey" Label="Start With Magic Key" />
                        </div>
                        <div class="col-auto form-group">
                            <Switch @bind-Value="config.ShuffleStartingSpells" Label="Shuffle Starting Spells" />
                            <Switch @bind-Value="config.StartWithShield" Label="Start With Shield" />
                            <Switch @bind-Value="config.StartWithJump" Label="Start With Jump" />
                            <Switch @bind-Value="config.StartWithLife" Label="Start With Life" />
                            <Switch @bind-Value="config.StartWithFairy" Label="Start With Fairy" />
                            <Switch @bind-Value="config.StartWithFire" Label="Start With Fire" />
                            <Switch @bind-Value="config.StartWithReflect" Label="Start With Reflect" />
                            <Switch @bind-Value="config.StartWithSpell" Label="Start With Spell" />
                            <Switch @bind-Value="config.StartWithThunder" Label="Start With Thunder" />
                        </div>
                        <div class="col-sm form-group">
                            <div class="row">
                                <p>Heart Containers</p>
                                <div class="col-sm-2">
                                    <label>
                                        <NumberInput TValue="int?" @bind-Value="@config.StartingHeartContainersMin" EnableMinMax="true" Min="1" Max="8" Placeholder="?" />
                                        Start Min
                                    </label>
                                </div>
                                <div class="col-sm-2">
                                    <label>
                                        <NumberInput TValue="int?" @bind-Value="@config.StartingHeartContainersMax" EnableMinMax="true" Min="1" Max="8" Placeholder="?" />
                                        Start Max
                                    </label>
                                </div>
                                <div class="col-sm-2">
                                    <label>
                                        <NumberInput TValue="int?" @bind-Value="@config.MaxHeartContainers" EnableMinMax="true" Min="1" Max="10" Placeholder="?" />
                                        Seed Max
                                    </label>
                                </div>
                            </div>
                            <div class="row">
                                <p>Starting Level</p>
                                <div class="col-sm-2">
                                    <label>
                                        <NumberInput TValue="int" @bind-Value="@config.StartingAttackLevel" EnableMinMax="true" Min="1" Max="8" Placeholder="?" />
                                        Atk
                                    </label>
                                </div>
                                <div class="col-sm-2">
                                    <label>
                                        <NumberInput TValue="int" @bind-Value="@config.StartingMagicLevel" EnableMinMax="true" Min="1" Max="8" Placeholder="?" />
                                        Mag
                                    </label>
                                </div>
                                <div class="col-sm-2">
                                    <label>
                                        <NumberInput TValue="int" @bind-Value="@config.StartingLifeLevel" EnableMinMax="true" Min="1" Max="11" Placeholder="?" />
                                        Life
                                    </label>
                                </div>
                            </div>
                            <div class="row">
                                @*<Switch @bind-Value="config.StartWithDownstab" Label="Start With Downstab" />
                                <Switch @bind-Value="config.StartWithUpstab" Label="Start With Upstab" />*@
                                <Switch @bind-Value="config.ShuffleStartingLives" Label="Randomize Number of Lives" />
                            </div>
                        </div>
                    </div>
                </Content>
            </Tab>
            <Tab Title="Overworld" IsActive="false">
                <Content>
                    <p class="mt-3">This is the placeholder content for the <b>Overworld</b> tab.</p>
                </Content>
            </Tab>
            <Tab Title="Palaces" IsActive="false">
                <Content>
                    <p class="mt-3">This is the placeholder content for the <b>Palaces</b> tab.</p>
                </Content>
            </Tab>
            <Tab Title="Levels" IsActive="false">
                <Content>
                    <p class="mt-3">This is the placeholder content for the <b>Levels</b> tab.</p>
                </Content>
            </Tab>
            <Tab Title="Spells" IsActive="false">
                <Content>
                    <p class="mt-3">This is the placeholder content for the <b>Spells</b> tab.</p>
                </Content>
            </Tab>
            <Tab Title="Enemies" IsActive="false">
                <Content>
                    <p class="mt-3">This is the placeholder content for the <b>Enemies</b> tab.</p>
                </Content>
            </Tab>
            <Tab Title="Items" IsActive="false">
                <Content>
                    <p class="mt-3">This is the placeholder content for the <b>Items</b> tab.</p>
                </Content>
            </Tab>
            <Tab Title="Drops" IsActive="false">
                <Content>
                    <p class="mt-3">This is the placeholder content for the <b>Drops</b> tab.</p>
                </Content>
            </Tab>
            <Tab Title="Hints" IsActive="false">
                <Content>
                    <p class="mt-3">This is the placeholder content for the <b>Hints</b> tab.</p>
                </Content>
            </Tab>
            <Tab Title="Misc" IsActive="false">
                <Content>
                    <p class="mt-3">This is the placeholder content for the <b>Misc</b> tab.</p>
                </Content>
            </Tab>
        </Tabs>
    </div>
</div>

<Modal @ref="modal" title="Generating ROM" IsVerticallyCentered="true" CloseOnEscape="false">
    <BodyTemplate>
        @GenerationProgress
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Cancel</Button>
        <Button Color="ButtonColor.Primary" disabled>Generating...</Button>
    </FooterTemplate>
</Modal>


@code {

    @using Z2Randomizer.Core
    @using Z2Randomizer.Core.Sidescroll
    @using System.Security.Cryptography

    @inject IJSRuntime JS
    @inject HttpClient Http
    @inject WebWorkerService webWorkerService
    @inject IRandomizerService randomizeService

    private string? Seed { get; set; }

    private WebWorker? webWorker { get; set; }

    //private class ProgressRef { public string Progress { get; set; } }
    //private ProgressRef GenerationProgress = new ProgressRef();
    private string GenerationProgress { get; set; } = "";

    private RandomizerConfiguration config = new RandomizerConfiguration();

    //private CancellationTokenSource cancellation = new CancellationTokenSource();

    protected void NewSeed()
    {
        Seed = new Random().Next(1000000000).ToString();
    }

    protected async Task GenerateROM()
    {
        var palaceRoomsRaw = await Http.GetStringAsync("PalaceRooms.json");
        var palaceRooms = new PalaceRooms(palaceRoomsRaw, null);

        webWorker = await webWorkerService.GetWebWorker();

        // Call GetService<ServiceInterface> on a web worker to get a proxy for the service on the web worker.
        // GetService can only be called with Interface types
        var workerRandomizeService = webWorker?.GetService<IRandomizerService>();

        var randomizer = new Hyrule(config, ROM, palaceRooms);
        var randomized = await workerRandomizeService!.Randomize(config, ROM!, palaceRoomsRaw, new Action<string>(s => {
            GenerationProgress = s;
            Console.WriteLine($"progress {s}");
            StateHasChanged();
            Task.Delay(1);
        }));

        await localStorage.SetItemAsync("Flags", config.Serialize());

        // TODO properly set the name of the file
        var fileName = "rom.nes";
        using var streamRef = new DotNetStreamReference(stream: new MemoryStream(randomized));
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    public bool HasRom { get => ROM != null; }
    public static byte[] GetBytes(Stream stream)
    {
        var bytes = new byte[stream.Length];
        stream.Seek(0, SeekOrigin.Begin);
        stream.ReadAsync(bytes, 0, bytes.Length);
        stream.Dispose();
        return bytes;
    }

    public byte[]? ROM;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Attempting to load from local storage");
        await LoadROMFromLocalStorage();
    }

    protected async Task LoadROMFromLocalStorage()
    {
        string ROMencoded = await localStorage.GetItemAsync<string>("ROM");
        var ROMData = Convert.FromBase64String(ROMencoded);
        if (CheckROMHash(ROMData))
        {
            ROM = ROMData;
        }
    }

    private async Task LoadFlagsFromLocalStorage()
    {
        var flags = await localStorage.GetItemAsync<string>("Flags");
        if (RandomizerConfiguration.Validate(flags))
        {
            config = new(flags);
        }
    }

    public async Task LoadROMFile(InputFileChangeEventArgs e)
    {
        await using MemoryStream fs = new MemoryStream();
        await e.File.OpenReadStream(maxAllowedSize: 257 * 1024).CopyToAsync(fs);
        byte[] somBytes = GetBytes(fs);
        var base64String = Convert.ToBase64String(somBytes, 0, somBytes.Length);
        await localStorage.SetItemAsync("ROM", base64String);

        await LoadROMFromLocalStorage();
    }

    public static byte[] GOOD_ROM = new byte[]
    {
    0x35, 0x34, 0x89, 0xa5, 0x7f, 0x24, 0xa4, 0x29, 0x57, 0x2e, 0x76, 0xbd, 0x45, 0x5b, 0xc5, 0x1d, 0x82, 0x1f, 0x70, 0x36
    };

    public bool CheckROMHash(byte[] ROMData)
    {
        var sha1 = SHA1.Create();
        return GOOD_ROM.SequenceEqual(sha1.ComputeHash(ROMData));
    }

    public async void Clear()
    {
        //this will clear the local storage
        await localStorage.ClearAsync();
    }

    private Modal modal = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
        await GenerateROM();
    }

    private async Task OnHideModalClick()
    {
        webWorker.Dispose();
        await modal.HideAsync();
    }
}
